#
# 2021.10.11-3  编译op包
#

name: 编译op包-F版
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

# 定时触发开始编译(把下面两个#去掉开启,时间设置请看定时编译说明)
#  schedule:
#   - cron: 0 16 */2 * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  #FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: aarch64/ARMv8_FOL.config
  #DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  #MRG_ADD_SH: aarch64/ARMv8.sh
  #Update_Ver_SH: aarch64/autoVersion.sh
  #Get_Imgs_SH: aarch64/getImgs.sh
  #SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_CONFIG: false
  RECENT_LASTEST: 10
  TZ: Asia/Shanghai
  FILE_NAME: Files4Build
  PRODUCT_NAME: Build_FOL

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 编译op包-F版
    strategy:
      fail-fast: false
      
    steps:
    - name: 准备
      uses: actions/checkout@master

    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq install rename
        sudo -E apt-get -qq install time
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 下载源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV

    - name: 更新软件包
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装软件包
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        sed -i 's/192.168.1.1/192.168.2.1/g' package/base-files/files/bin/config_generate
        sed -i 's/OpenWrt/MRG AutoBuild ${{ env.DATE1 }} @ OpenWrt/g' package/lean/default-settings/files/zzz-default-settings

    - name: 缓存加速
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt
        
    - name: SSH远程连接（配置固件）
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 生成.config配置文件
      run: |
        cd openwrt
        make defconfig
        ./scripts/diffconfig.sh > ${GITHUB_WORKSPACE}/config.txt
    
    - name: 上传.config配置文件
      uses: actions/upload-artifact@master
      if: env.UPLOAD_CONFIG == 'true'
      with:
        name: .config_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: config.txt
        
    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make clean
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DATE_YMD=_$(date +"%Y%m%d")" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
    - name: 整理固件文件夹
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/packages
        tar -zcvf F-AllPackages.tar.gz ./*
        cp F-AllPackages.tar.gz $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        rename 's/openwrt/F-openwrt/' openwrt*gz
        rm -rf packages sha256sums feeds.buildinfo openwrt-armvirt-64-default.manifest openwrt-armvirt-64-Image openwrt-armvirt-64-rootfs-ext4.img version.buildinfo
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT
      
    - name: 上传bin文件夹
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin/targets/*/*/bin.tar.gz
        retention-days: ${{ env.RECENT_LASTEST }}
        if-no-files-found: ignore
        
    - name: 上传固件
      uses: actions/upload-artifact@master
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        retention-days: ${{ env.RECENT_LASTEST }}
        if-no-files-found: ignore
        
    - name: 固件发布信息
      id: release
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }}
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        commit: master
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          编译Lede大op固件，Flippy打包用，不能直刷！！！
          当前使用版本:【编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/lede)更新记录】
          ${{ env.useVersionInfo }}
        artifacts: ${{ env.FIRMWARE }}/*

    - name: 电报机器人信息通知
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }}编译完成" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
